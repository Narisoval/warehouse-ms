version: '3.8'

    
services:
  warehouse_api:
    image: warehouse
    depends_on:
      warehouse_db:
        condition: 
          service_healthy
        
      warehouse_mq:
          condition:
            service_healthy
      es01:
        condition: 
          service_healthy
        
    container_name: warehouse_api
    ports:
      - "8080:80"
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ConnectionStrings__postgres=User ID=$POSTGRES_USER;Password=$POSTGRES_PASSWORD;Server=warehouse_db;Port=5432;Database=$POSTGRES_DB_NAME;
      - ElasticConfiguration__Uri=http://es01:9200
      - MessageBroker__host=amqp://warehouse_mq:5672
    networks:
      - api_network
      
  warehouse_db:
    image: postgres:15.2-alpine
    container_name: warehouse_db
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB_NAME
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - .docker-data/db/postgres-data:/var/lib/postgresql/data
    networks:
      - api_network
    
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    
  warehouse_mq:
    image: rabbitmq:3.11-management-alpine
    volumes:
      - .docker-data/queue/data/:/var/lib/rabbitmq
      - .docker-data/queue/log/:/var/log/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"] 
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - api_network
       
  es01:
    image: elasticsearch:8.6.2
    container_name: es01
    hostname: elasticsearch
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - elastic_network
      - api_network
       
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  kib01:
    image: kibana:8.6.2
    depends_on:
      - es01
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - elastic_network
    
volumes:
  postgres-data:
    driver: local
  data01:
    driver: local
    
networks:
  api_network:
    driver: bridge
  elastic_network:
    driver: bridge
